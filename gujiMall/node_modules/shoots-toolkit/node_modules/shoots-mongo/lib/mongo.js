'use strict';

var util = require('./util');
var config = {};

function collection(model) {
  if (!(this instanceof collection)) {
    return new collection(model);
  }
  this.model = model;
}

function mongo(appOptions) {
  config = appOptions;
};

mongo.prototype.collection = mongo.prototype.Collection = collection;

collection.prototype.findOne = function*(selector, projection, options) {

  var data = {};

  if (typeof(selector) == 'string') {
    data.query = {
      _id: selector
    };
  } else {
    data.query = selector;
  }

  data.projection = projection ? projection : {};
  var result = yield util.ajax(config, this.model, 'findOne', data);
  return result;
}


collection.prototype.find = function*(selector, projection, option) {
  var data = {};
  data.query = selector ? selector : null;
  data.projection = projection ? projection : {};
  data.option = option;
  var result = yield util.ajax(config, this.model, 'find', data);
  return result;
}

collection.prototype.insert = function*(doc) {
  var result = yield util.ajax(config, this.model, 'insert', {
    document: doc
  });
  return result;
}

collection.prototype.update = function*(selector, modifier, options) {
  var data = {};

  data.criteria = selector;
  data.action = modifier;
  data.option = options ? options : {};
  var result = yield util.ajax(config, this.model, 'update', data);
  return result;
}

collection.prototype.remove = function*(selector) {
  var data = {};
  data.criteria = selector;
  var result = yield util.ajax(config, this.model, 'remove', data);
  return result;
}

collection.prototype.count = function*(selector) {
  var data = {};
  data.criteria = selector;
  var result = yield util.ajax(config, this.model, 'count', data);
  return result;
}


collection.prototype.save = function*(doc) {
  var result = yield util.ajax(config, this.model, 'save', {
    document: doc
  });
  return result;
}

collection.prototype.softDelete = function*(selector) {
  var data = {};
  data.criteria = selector;
  var result = yield util.ajax(config, this.model, 'softDelete', data);
  return result;
}

module.exports = mongo;