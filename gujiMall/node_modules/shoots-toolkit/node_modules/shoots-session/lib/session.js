var mongo = require('shoots-mongo');
var util = require('./util');
var cookies = require('./cookies');
var session = {};
var options = {};
var model = 'session';
var EXPIRE = 7 * 24 * 60 * 60 * 1000; //7days 
//db.session.createIndex( { "expireAt": 1 }, { expireAfterSeconds: 0 })
var collection;


module.exports = function(appOptions) {
	options = appOptions;
	collection = mongo(appOptions).Collection(model);
	return session;
}


/**
 * [得到当前的sessionid]
 * @param {[type]} ctx           [description]
 * @yield {[type]} [description]
 */
session.getId = function*(ctx) {
	return cookies.get(ctx, options.cookieid);
}


session.get = function*(ctx, name) {
	var id = yield this.getId(ctx);
	if (id) {
		var doc = yield get(id);
		if (doc) {
			if (name) {
				return doc.val[name];
			} else
				return doc;
		}
	} else {
		console.log('no session cookie');
	}
	return null;
}

session.set = function*(ctx, name, val, expireAfterSeconds) {
	var playload = {
		id: options.id,
		name: options.name,
		expire: expireAfterSeconds * 1000 + util.getTimestamp()
	};
	var sessionId = yield this.getId(ctx);
	if (!sessionId) {
		if (val && val.userid) {
			playload.userid = val.userid;
		}
		sessionId = util.createSessionId(options.id, playload, options.secret);
	} else {
		if (val && val.userid) {
			try {
				var token = util.getToken(sessionId);
				playload = util.unsign(token, options.secret);
			} catch (e) {

			}
			if (playload && val.userid != playload.userid) {
				playload.userid = val.userid;
				sessionId = util.createSessionId(options.id, playload, options.secret);
			}
		}
	}
	cookies.set(ctx, options.cookieid, sessionId, expireAfterSeconds);

	return yield set(sessionId, name, val, expireAfterSeconds);
}

session.remove = function*(ctx, name) {

	var id = yield this.getId(ctx);
	console.log('remove');
	return yield remove(id, name);
}


session.clear = function*(ctx) {
	var id = yield this.getId(ctx);
	if (id) {
		return yield clear(id);
	}
}

/**
 设置应用会话
 key 会话的唯一值
 value 要保存的值
 expireAfterSeconds 多少秒后过期 default 7days expired
*/
function* set(key, name, value, expireAfterSeconds) {
	var now = (new Date()).getTime();
	var expireAt = null;
	if (expireAfterSeconds && expireAfterSeconds > 0) {
		expireAt = now + expireAfterSeconds * 1000;
	} else {
		expireAt = now + EXPIRE; // default 7days expired
	}

	var doc = yield get(key);
	if (!doc) {
		doc = {
			key: key,
			val: {},
			expireAt: new Date(expireAt)
		};
		doc.val[name] = value;
		var result = yield collection.insert(doc);
		return result && result.errcode == 0;
	}
	doc.val[name] = value;
	doc.expireAt = new Date(doc.expireAt);
	var _id = doc._id;
	delete doc._id;
	var result = yield collection.update({
		_id: _id
	}, {
		'$set': doc
	});
	return result && result.errcode == 0;
}

function* get(key) {
	var result = yield collection.findOne({
		key: key
	});

	return result && result.errcode == 0 && result.data;
}

function* remove(key, name) {
	var doc = yield get(key);
	if (doc && name && doc.val && doc.val[name]) {
		var _id = doc._id;
		delete doc.val[name];
		var result = yield collection.save(doc);
		return result && result.errcode == 0;
	}
	return true;
}

function* clear(key) {
	var result = yield collection.remove({
		key: key
	});
	return result && result.errcode == 0;
}