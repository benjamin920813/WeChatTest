var mongo = require('shoots-mongo');
var session = require('shoots-session');
var util = require('./util');
var cookies = require('./cookies');
var _user = {};
var options = {};
var m_expire = 7 * 24 * 60 * 1000;

var User, Session;

module.exports = function(appOptions) {
options = appOptions;
User = mongo(appOptions).Collection('user');
Session = session(appOptions);
return _user;
}

/*
 用户是否唯一
*/
_user.unique = function*(name, value) {
var where = {};
where[name] = value;
var user = yield User.findOne(where);
if (user && user.errcode == 0 && user.data && user.data[name] == value) {
    return user.data;
}
return null;
}


/*
添加用户
*/
_user.add = function*(userid, username, password, userrole, userinfo) {

var _doc = yield _user.unique('username', username);
if (_doc) {
    return {
        errcode: 100,
        errmsg: '用户已经存在',
        data: _doc
    };
}
var salt = yield util.md5(yield util.getTimestamp());
var user = {
    userid: userid,
    username: username,
    userrole: userrole || 'user',
    password: yield util.md5(password + salt),
    salt: salt,
    isdeleted: 0
}
for (var item in userinfo) {
    user[item] = userinfo[item];
}
return yield User.insert(user);
}

/*
删除用户
*/
_user.remove = function*(userid, softremove) {
sr = softremove || true;
if (sr) {
    return yield User.update({
            userid: userid
        }, {
            '$set': {
                'isdeleted': 1
            }
        });
} else {
    return yield User.remove({
            userid: userid
        });
}
}

/*
更新用户
*/
_user.update = function*(userid, userinfo) {
var _doc = yield User.findOne({
    'userid': userid
});

if (_doc && _doc.errcode == 0 && _doc.data && _doc.data.userid == userid) {
    var user = _doc.data;
    var _id = user._id;
    delete user._id;

    if (userinfo) {
        if (userinfo.username != user.username) {
            var checkUserName = yield this.unique('username', username);
            if (checkUserName) {
                return {
                    errcode: 104,
                    errmsg: '用户名已经被使用',
                };
            }
            user.username = username;
            delete userinfo['username']
            ;
        }

        for (var item in userinfo) {
            if (item == 'password') {
                var ts = yield util.getTimestamp();
                var salt = yield util.md5(ts);
                user.salt = salt;
                user.password = yield util.md5(userinfo.password + salt);
            } else if (item == 'profile') {
                if (user.profile) {
                    for (var subitem in userinfo.profile) {
                        user.profile[subitem] = userinfo.profile[subitem];
                    }
                } else {
                    user.profile = profile
                }
            } else {
                user[item] = userinfo[item];
            }
        }
    }
    return yield User.update({
            _id: _id
        }, {
            $set: user
        });
}

return {
    errcode: 103,
    errmsg: '用户不存在',
};
}


/*
1：检查用户密码是否正确
2：如果正确，写入sessionid到到数据库session表中，如果remember=true,则设置cookie的失效时间为expireSeconds，否则为七天
3：如果出错，则返回出错信息

服务器端，会自动更新session的时间
*/
_user.login = function*(ctx, username, password, remember, expireSeconds) {
var expire = expireSeconds ? expireSeconds : m_expire;
var result = {
    errcode: 0,
    errmsg: ''
};
var result = yield User.findOne({
    username: username
}, {
    password: 1,
    salt: 1,
    userrole: 1,
    userid: 1
});

if (result.errcode == 0) {
    var user = result.data;
    if (!user || !user.password) {
        return {
            errmsg: 101,
            errmsg: '用户不存在'
        }
    }
    var pwd = yield util.md5(password + user.salt);
    if (user.password == pwd) {
        var user = {
            username: username,
            userrole: user.userrole,
            userid: user.userid
        };
        console.log('login success');
        var result = yield Session.set(ctx, 'user', user, expire);
        return result === true ? {
            errcode: 0,
            errmsg: 'ok'
        } : {
            errcode: 503,
            errmsg: '设置会话出错'
        }
    } else {
        return {
            errcode: 102,
            errmsg: '密码不正确'
        }
    }
} else {
    return result
}
}

/**
 * 设置用户id,生成sessionid,如果remember＝true，并设置cookie
 * @param {[type]} ctx            [description]
 * @param {[type]} remember       [description]
 * @param {[type]} userId         [description]
 * @param {[type]} userNmae       [description]
 * @param {[type]} userRole       [description]
 * @param {[type]} expireSeconds: expireSeconds [description]
 * @yield {[type]} [description]
 */
//
//_user.setUserId = function*(ctx, userId, remember, expireSeconds) {
_user.loginByUserId = function*(ctx, userId, remember, expireSeconds) {

var result = yield User.findOne({
    userid: userId
}, {
    username: 1,
    userrole: 1
});
if (result.errcode != 0) {
    return false;
}
var user = result.data;
if (!user) {
    return false;
}

var expire = expireSeconds ? expireSeconds : m_expire;
var user = {
    username: username,
    userrole: user.userrole,
    userid: user.userid
};
return yield Session.set('user', user, expire);
}

_user.logout = function*(ctx) {
//删除session id
console.log('logout-----------');
yield Session.clear(ctx);
return false;
}


_user.getUserId = function*(ctx) {
var user = yield Session.get(ctx, 'user');
if (user) {
    return user.userid;
}
return null;
}

_user.getUser = function*(ctx) {
var userid = yield _user.getUserId(ctx);
if (userid) {
    var doc = yield User.findOne({
        userid: userid
    }, {
        password: 0,
        salt: 0
    });
    return doc;
}
return null;
}