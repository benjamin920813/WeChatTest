'use strict';

var co = require('co');
var request = require('co-request');
var debug = require("debug")('shoots-mongo');
//var bson = require("bson");
//var BSON = new bson.BSONPure.BSON();

var util = {};

util.bson_encode = function(data) {
    var type = ({}).toString.call(data);
    var d = (type === '[object Object]') ? {} : [];
    for (var i in data) {

        var type = ({}).toString.call(data[i]);
        if (type === '[object String]') {
            d[i] = 'string|' + data[i].toString();
        } else if (type === '[object Null]') {
            d[i] = 'null|';
        } else if (type === '[object Number]') {
            d[i] = 'number|' + data[i].toString();
        } else if (type === '[object Date]') {
            d[i] = 'date|' + data[i].getTime().toString();
        } else if (type === '[object RegExp]') {
            d[i] = 'regexp|' + data[i].toString();
        } else if (type === '[object Object]') {
            d[i] = this.bson_encode(data[i]);
        } else if (type === '[object Array]') {
            d[i] = this.bson_encode(data[i]);
        } else if (type === '[object Boolean]') {
            d[i] = 'bool|' + data[i].toString();
        }
    }
    return d;
}

util.bson_decode = function(data) {
    var type = ({}).toString.call(data);
    var d = (type === '[object Object]') ? {} : [];
    for (var i in data) {
        var type = ({}).toString.call(data[i]);
        if (type === '[object String]') {

            var matches = data[i].match(/^string\|([\w|\W]*)/);
            if (matches) {
                d[i] = matches[1];
                continue;
            }
            matches = data[i].match(/^number\|([\w|\W]*)/);
            if (matches) {
                d[i] = (matches[1].search(/\./)) ? parseFloat(matches[1]) : parseInt(matches[1]);
                continue;
            }
            matches = data[i].match(/^null\|/);
            if (matches) {
                d[i] = null;
                continue;
            }
            matches = data[i].match(/^date\|([\w|\W]*)/);
            if (matches) {
                d[i] = new Date(parseInt(matches[1]));
                continue;
            }
            matches = data[i].match(/^bool\|([\w|\W]*)/);
            if (matches) {
                d[i] = matches[1] == 'true';
                continue;
            }
            matches = data[i].match(/^regexp\|([\w|\W]*)/);
            if (matches) {
                var info = matches[1].match(/^\/(.*)\/([^\/]*)$/);
                if (info) {
                    d[i] = new RegExp(info[1], info[2]);
                }
                continue;
            }
        } else if (type === '[object Object]') {
            d[i] = bson_decode(data[i]);
        } else if (type === '[object Array]') {
            d[i] = bson_decode(data[i]);
        }
    }
    return d;
}

module.exports = util;

//util.ajax = function*(appOptions, model, func, data) {
//  var formData = {
//      app: {
//          id: appOptions.id,
//          secret: appOptions.secret,
//          name: appOptions.name,
//          config: appOptions.config
//      },
//      collection: model,
//      func: func,
//      req: data
//  };
//  var doc = BSON.serialize(formData, false, true, false);
//  var result = yield request.post(appOptions.server + '/collection/api/handle', {
//      formData: {
//          data: doc
//      },
//      json: true
//  });
//  if (typeof(result.body) == 'object') {
//      return result.body;
//  } else {
//      return {
//          errcode: result.statusCode,
//          errmsg: result.statusMessage
//      };
//  }
//}

util.ajax = function*(appOptions, model, func, data) {
    var post = {
        app: {
            id: appOptions.id,
            secret: appOptions.secret,
            name: appOptions.name,
            config: appOptions.config
        },
        collection: model,
        func: func,
        req: this.bson_encode(data)
    };
    debug('post data:= ' + JSON.stringify(post));

    var response = yield request({
        method: 'POST',
        uri: appOptions.server + '/collection/api/handle',
        resolveWithFullResponse: true,
        //formData: post,
		body: post,
        json: true
    });

    debug('response := ' + JSON.stringify(response));
    if (response.statusCode == 200) {
        return response.body;
    } else if (response.statusCode == 204) {
        return null;
    } else {
        throw new Error(response);
    }
}
