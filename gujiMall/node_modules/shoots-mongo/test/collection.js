var assert = require("assert");
var co = require('co');
var mocha = require('mocha')
var coMocha = require('co-mocha')

coMocha(mocha)


/*var app = {
    id: 'sh55b339a797d46',
    secret: '73324795806c48c2059a506a60103e78',
    name: "app18",
    server: 'http://127.0.0.1:3000'
};*/

var app = {
    id: 'sh5600bbe2cef5a',
    secret: '44c04a63390014ab497fed3f58ee5ab3',
    name: "test",
    server: 'http://dev.api.zpage.me'
};


var mongo = require('../shoots-mongo')(app);

var doc = {
    id: 1000,
    name: 'go to office at 9:00 am',
    owner: 'witwave',
    date: new Date(),
    year: 2015,
    other: {
        key: 1,
        val: {
            name: 'test',
            id: 1
        }
    },
    key: 'sh5600bbe2cef5a.eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6InNoNTYwMGJiZTJjZWY1YSIsIm5hbWUiOiJ0ZXN0IiwiZXhwaXJlIjpudWxsLCJ0cyI6MTQ0MzUwNDgxMjA3NiwidXNlcmlkIjoiMDA5In0.OwEDSRVGgMgerW_8xCcWnqqEo-l8zhP0P0yUWLILEwo',
    val: {
        user: {
            username: 'wave',
            userrole: 'developer',
            userid: '009'
        }
    }
}

describe('insert a task ', function() {
    it('it should return 0 ', function*(done) {
        var task = mongo.collection('task');
        var result = yield task.insert(doc);
        assert.notEqual(null, result);
        assert.equal(doc.id, result.id);
        done();
    });
});

describe('insert a task ', function() {
    it('it should return 0 ', function*(done) {
        var task = mongo.collection('task');
        var result = yield task.insert(doc);
        assert.notEqual(null, result);
        assert.equal(doc.id, result.id);
        done();
    });
});


describe('find one task', function() {
    it('it should return 0 ', function*(done) {
        var task = mongo.collection('task');
        var result = yield task.findOne({
            id: doc.id
        });
        assert.equal(doc.id, result.id);
        done();
    });
});


describe('find task', function() {
    it('it should return task\' count 1', function*(done) {
        var task = mongo.collection('task');
        var data = yield task.find({
            owner: doc.owner
        });

        //assert.equal(1, data.length);
        assert.equal(doc.owner, data[0].owner);
        done();
    });
});

describe('find 1 task', function() {
    it('it should return  1', function*(done) {
        var task = mongo.collection('task');
        var data = yield task.find({
            owner: doc.owner
        }, {}, {
            limit: 1
        });
        console.log(data.length);
        //assert.equal(1, data.length);
        assert.equal(1, data.length);
        done();
    });
});

describe('save task', function() {
    it('it should return  doc ', function*(done) {
        var task = mongo.collection('task');
        var result = yield task.save(doc);
        assert.notEqual(null, result);
        assert.equal(doc.owner, result.owner);
        done();
    });
});

describe('update one task', function() {
    it('it should return true', function*(done) {
        var task = mongo.collection('task');
        var result = yield task.update({
            owner: doc.owner
        }, {
            '$set': {
                owner: 'jack',
                other: {
                    key: 2
                }
            }
        });
        assert.equal(true, result > 0 ? true : result);
        done();
    });
});


describe('upsert one doc', function() {
    it('it should return true', function*(done) {
        var user = {
            age: '30',
            height: 160
        };
        var coll = mongo.collection('test');
        var result = yield coll.update({
            owner: 'lucy'
        }, {
            '$set': user
        }, {
            upsert: true
        });

        assert.equal(true, result > 0 ? true : result);

        result = yield coll.findOne({
            owner: 'lucy'
        });

        assert.equal(user.age, result.age);

        var result = yield coll.update({
            owner: 'lucy'
        }, {
            '$set': user
        }, {
            upsert: true
        });

        assert.equal(true, result > 0 ? true : result);

        result = yield coll.count({
            owner: 'lucy'
        });
        assert.equal(1, result);
        done();
    });
});


describe('soft remove  the task', function() {
    it('it should return true', function*(done) {
        var task = mongo.collection('task');
        var result = yield task.softDelete({
            name: doc.name
        });
        assert.equal(true, result > 0 ? true : result);
        done();
    });
});



describe('count the task', function() {
    it('it should return true', function*(done) {
        var task = mongo.collection('task');
        var result = yield task.count({
            name: doc.name
        });
        assert.equal(true, result > 0);
        done();
    });
});


describe('remove the task', function() {
    it('it should return true', function*(done) {
        var task = mongo.collection('task');
        var result = yield task.remove({
            id: doc.id
        });
        assert.equal(true, result > 0 ? true : result);
        done();
    });
});