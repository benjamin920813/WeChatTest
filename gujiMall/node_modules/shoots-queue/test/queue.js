var assert = require("assert");
var co = require('co');
var mocha = require('mocha')
var coMocha = require('co-mocha')

coMocha(mocha)



var app = {
  id: 'sh55b339a797d46',
  secret: '73324795806c48c2059a506a60103e78',
  name: "app18",
  server: 'http://127.0.0.1:3000'
}


// var app = {
//   id: 'sh5600bbe2cef5a',
//   secret: '44c04a63390014ab497fed3f58ee5ab3',
//   name: "test",
//   server: 'http://dev.api.zpage.me'
// };

var queue = require('../shoots-queue')(app);
var taskQueue2 = queue.new('task2');
var taskQueue = queue.new('task');
var doc = {
  id: 1000,
  type: 'message',
  task: {
    data: '123',
    name: 'test'
  }
}

var doc2 = {
  id: 1,
  type: 'user'
}


describe('clean ', function() {
  it('it should deletes all processed mesages from the queue', function*(done) {
    var result = yield taskQueue2.clean();
    assert.notEqual(null, result);
    done();
  });
});

describe('enque ', function() {
  it('it should return message ack ', function*(done) {
    var result = yield taskQueue2.enqueue(doc);
    assert.notEqual(null, result);
    done();
  });
});


describe('clean ', function() {
  it('it should deletes all processed mesages from the queue', function*(done) {
    var result = yield taskQueue.clean();
    assert.notEqual(null, result);
    done();
  });
});

describe('enque ', function() {
  it('it should return message ack ', function*(done) {
    var result = yield taskQueue.enqueue(doc);
    assert.notEqual(null, result);
    done();
  });
});

describe('total ', function() {
  it('it should return the total number ', function*(done) {
    var total = yield taskQueue.total();
    console.log(total);
    assert.equal(true, total > 0);
    done();
  });
});

describe('size', function() {
  it('it should return the total number of messages that are waiting in the queue', function*(done) {
    var size = yield taskQueue.size();
    assert.equal(true, size >= 0);
    done();
  });
});

describe('inFlight', function() {
  it('it should return the total number of messages that are currently in fligh', function*(done) {
    var size = yield taskQueue.inFlight();
    assert.equal(true, size >= 0);
    done();
  });
});

describe('done', function() {
  it('it should return the total number of messages that have been processed correctly in the queue', function*(done) {
    var size = yield taskQueue.done();
    assert.notEqual(null, size);
    done();
  });
});

describe('try ', function() {
  this.timeout(30000);
  it('it should return some message when not ack ', function*(done) {
    var testQueue = queue.new('test');
    var out1 = yield testQueue.try();
    var out2 = yield testQueue.try();
    var out3 = yield testQueue.try();

    console.log("out1", out1);
    console.log("out2", out2);

    done();
  });
});


describe('dequeue and ack ', function() {
  it('it should return true ', function*(done) {
    var result = yield taskQueue.dequeue();
    assert.notEqual(null, result);
    assert.notEqual(null, result.ack);
    var result = yield taskQueue.ack(result.ack);
    assert.notEqual(result, result.ack);
    done();
  });
});
