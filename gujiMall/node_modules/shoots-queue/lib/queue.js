'use strict';
var NodeUtil = require('util');
var debug = require("debug")('shoots-queue');
var util = require('./util');
var config = {};

function queue(name) {
  if (!(this instanceof queue)) {
    return new queue(name);
  }
  this.name = name;
}

function q(appOptions) {
  config = appOptions;
}

q.prototype.new = queue;

queue.prototype.enqueue = function*(msg, delay) {
  var data = {
    msg: msg
  };
  if (delay != undefined) {
    data.delay = delay;
  }
  return yield util.ajax(config, this.name, 'enqueue', data);
}


queue.prototype.dequeue = function*() {
  return yield util.ajax(config, this.name, 'dequeue');
}

queue.prototype.try = function*() {
  //only add tires count
  return yield util.ajax(config, this.name, 'try');
}

queue.prototype.ack = function*(ack) {
  return yield util.ajax(config, this.name, 'ack', ack);
}

queue.prototype.ping = function*(ack) {
  return yield util.ajax(config, this.name, 'ping', ack);
}

queue.prototype.inFlight = function*() {
  return yield util.ajax(config, this.name, 'inflight');
}

queue.prototype.size = function*() {
  return yield util.ajax(config, this.name, 'size');
}

queue.prototype.total = function*() {
  return yield util.ajax(config, this.name, 'total');
}

queue.prototype.clean = function*() {
  return yield util.ajax(config, this.name, 'clean');
}

queue.prototype.done = function*(ack) {
  return yield util.ajax(config, this.name, 'done', ack);
}
module.exports = q;
